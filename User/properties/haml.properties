# Define SciTE settings for haml files.

file.patterns.haml=*.haml;

*source.patterns.haml=$(file.patterns.haml);

shbang.haml=py

filter.haml=haml (haml)|$(file.patterns.haml)|

*filter.haml=$(filter.haml)

lexer.$(file.patterns.haml)=python

*language.haml=haml|haml||

keywordclass.haml2=a abbr address area article aside audio b base bdi bdo \
blockquote body br button canvas caption cite code col colgroup data datalist \
dd del dfn div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 \
h4 h5 h6 head header hr html i iframe img input ins kbd keygen label legend \
li link main map mark meta meter nav noscript object ol optgroup option output \
p param pre progress q rb rp rt rtc ruby s samp script section select small \
source span strong style sub sup table tbody td template textarea tfoot th \
thead time title tr track u ul var video wbr

keywordclass.haml3=accept accept-charset accesskey action align alt async \
autocomplete autofocus autoplay autosave bgcolor background border buffered \
challenge charset checked cite class code codebase color this   cols colspan \
content contenteditable contextmenu controls coords data data-* datetime \
default defer dir dirname disabled download draggable dropzone enctype for \
form formaction headers height Specifies hidden high href hreflang http-equiv \
icon id ismap itemprop keytype kind label lang language list loop low manifest \
max maxlength media method min multiple name novalidate open optimum pattern \
ping placeholder poster preload pubdate radiogroup readonly rel required reversed \
rows rowspan sandbox scope scoped seamless selected shape size sizes span \
spellcheck src srcdoc srclang srcset start step style summary tabindex target \
title type usemap value width For wrap

keywordclass.haml=$(keywordclass.haml2)

# Extra keywords for cython
keywordclass.cython=import os string table

keywords.$(file.patterns.haml)=$(keywordclass.haml) $(keywordclass.cython)

# If you uncomment the 3 lines below,
# and put some words after "keywordclass2.haml=",
# those words will be styled by style.haml.14

#keywordclass2.haml=
#keywords2.$(file.patterns.haml)=$(keywordclass2.haml)

# Use 2 sets of substyles to highlight standard library modules and
# imports from the future.
# Additional identifier sets can be added by incrementing the  next
# line's value and adding extra definitions similar to below.
substyles.haml.11=2

substylewords.11.1.$(file.patterns.haml)=$(keywordclass.haml3)
style.haml.11.1=fore:#DD9900

substylewords.11.2.$(file.patterns.haml)=__future__ \
with_statement unicode_literals print_function
style.haml.11.2=fore:#EE00AA,italics

#~ statement.indent.$(file.patterns.haml)=10 :
statement.indent.$(file.patterns.haml)=5 class def elif else except finally \
for if try while with

statement.lookback.$(file.patterns.haml)=0
block.start.$(file.patterns.haml)=
block.end.$(file.patterns.haml)=

view.indentation.examine.*.haml=2

tab.timmy.whinge.level=1

#fold.quotes.haml=1

comment.block.haml=#~

indent.haml.colon=1

# haml styles
# White space
style.haml.0=fore:#808080
# Comment
style.haml.1=fore:#007F00,$(font.comment)
# Number
style.haml.2=fore:#007F7F
# String
style.haml.3=fore:#7F007F,$(font.monospace)
# Single quoted string
style.haml.4=fore:#7F007F,$(font.monospace)
# Keyword
style.haml.5=fore:#00007F,bold
# Triple quotes
style.haml.6=fore:#7F0000
# Triple double quotes
style.haml.7=fore:#7F0000
# Class name definition
style.haml.8=fore:#0000FF,bold
# Function or method name definition
style.haml.9=fore:#007F7F,bold
# Operators
style.haml.10=bold
# Identifiers
style.haml.11=
# Comment-blocks
style.haml.12=fore:#7F7F7F
# End of line where string is not closed
style.haml.13=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Highlighted identifiers
style.haml.14=fore:#407090
# Decorators
style.haml.15=fore:#805000
# Matched Operators
style.haml.34=fore:#0000FF,bold
style.haml.35=fore:#FF0000,bold
# Braces are only matched in operator style
braces.haml.style=10

if PLAT_WIN
	command.go.*.haml=hamlw -u "$(FileNameExt)"
	command.go.subsystem.*.haml=1

if PLAT_GTK
	command.go.*.haml=haml -u "$(FileNameExt)"

if PLAT_MAC
	command.go.*.haml=haml -u "$(FileNameExt)"

command.name.1.$(file.patterns.haml)=Syntax Check
command.1.$(file.patterns.haml)=haml -c "import haml_compile; haml_compile.compile(r'$(FilePath)')"
