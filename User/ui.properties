# -*- coding: utf-8 -*-

#优先设置字体

[user默认文本字体]
#Trebuchet MS|Fixedsys|Monaco|Lucida Console|consolas|Courier New
font.default=font:DejaVuSansMono NF
font.monospace=font:DejaVuSansMono NF
font.base=$(font.monospace),size:12
font.small=$(font.monospace),size:10
font.comment=$(font.monospace),size:12
font.code.comment.box=$(font.comment)
font.code.comment.line=$(font.comment)
font.code.comment.doc=$(font.comment)
font.code.comment.nested=$(font.comment)
font.text=$(font.monospace),size:12
font.text.comment=$(font.monospace),size:12
font.embedded.base=$(font.monospace),size:12
font.embedded.comment=$(font.monospace),size:12
font.vbs=$(font.monospace),size:12

font.size=12
font.size.small=10

#导入通用颜色
[user文本颜色模式]
#import themes/solarized
import themes/vim

#软件UI设置
# Status Bar
statusbar.number=3
statusbar.text.1=\
当前状态: 行=$(LineNumber)/$(NbOfLines) 列=$(ColumnNumber) 共 $(BufferLength) 字节. \
$(OverType) ($(EOLMode)) $(FileAttr) 选择: $(SelHeight) 行 $(SelLength) 字节. \
文件: $(FileNameExt) 格式: $(Language)$(FileAttr) \
APIPath: $(APIPath) | AbbrevPath: $(AbbrevPath) | code.page: $(code.page) | character.set: $(character.set)
statusbar.text.2='auto update onSwitchFile'

if PLAT_WIN
	command.scite.help="file://$(SciteDefaultHome)\SciTEDoc.html"
	command.scite.help.subsystem=2
if PLAT_GTK
	command.print.*=a2ps "$(FileNameExt)"
	command.scite.help=xdg-open "file://$(SciteDefaultHome)/SciTEDoc.html"

# sidebar extends
[SideBar] 
sidebar.show=1
sidebar.position=left
sidebar.functions.flags=1
sidebar.functions.params=1
sidebar.abbrev.calltip=1
ext.lua.debug.traceback=1
style.*.255=fore:#808080,back:#FEFEFE

# User defined key commands
user.shortcuts=\
Ctrl+Shift+V|IDM_PASTEANDDOWN|\
Ctrl+PageUp|IDM_PREVFILE|\
Ctrl+PageDown|IDM_NEXTFILE|

### 设置显示
edge.column=80
edge.mode=1
edge.colour=#C0DCC0
------------------------------------------------------------------------------

# [user] 默认文本前景色
colour.fore=#BDC9F7
# [user] 默认文本背景色 #101010
colour.back=#151A1D
colour.lineback=#21292E
colour.linefore=#BFBFBF

# 书签前景色
bookmark.fore=#FFF333
# 书签背景色
bookmark.back=#FFF000
# 书签透明度，范围为 0 至 255
bookmark.alpha=100

# 折叠栏颜色 $(colour.back)
fold.margin.colour=$(colour.back)
# 折叠栏高亮色
fold.margin.highlight.colour=$(colour.back)
# [diogin] 折叠符号前景色 #3366FF
fold.symbols.fore=#3366FF
# [diogin] 折叠符号背景色
fold.symbols.back=$(colour.back)

# 光标前景色
caret.fore=#FFA500
# [diogin] 跟 caret.fore 一样，但只用于额外的选择
caret.additional.fore=#FF0000
# 光标所在行的背景色
caret.line.back=#FFFFFF
# 光标所在行的背景色透明度，范围为 0 到 255
caret.line.back.alpha=16
# 超出 edge.column 的长行部分背景色，或长行线的颜色
edge.colour=#3366FF

# 在文本框和输出框中提示错误和警告的标志符的前景色
error.marker.fore=#FF0000
# 在文本框和输出框中提示错误和警告的标志符的背景色
error.marker.back=#404040

# 被选中的文本的前景色
selection.fore=#FFFFFF
# 被选中的文本的背景色
selection.back=#3366FF
# 被选中的文本的透明度，范围为 0 到 256，256 为禁用透明
selection.alpha=256

# 其它被选中的文本的前景色
selection.additional.fore=
# 其它被选中的文本的背景色
selection.additional.back=
# 其它被选中的文本的透明度，范围为 0 到 256，256 为禁用透明
selection.additional.alpha=

# 可见的空白的前景色（将覆盖词法的样式设定）
whitespace.fore=#282828
# 可见的空白的背景色（将覆盖词法的样式设定）
#whitespace.back=#FF0000

# 标记找到的字符串。查找时勾上 Mark All 将在所有找到的字符串上高亮标签
find.mark=#FF0000

#181818
colour.lineback=#21292E
colour.linefore=#BFBFBF
# [user] 默认文本是否斜体
other.italics=notitalics
# [user] 默认文本是否粗体
other.bold=notbold
# [user] 默认是否 eolfilled
other.eolfilled=noteolfilled
# [user] 默认是否下划线
other.underlined=notunderlined

# [user] 默认全局等宽字体。只有 font 和 size 有效
font.family=$(font.default),size:$(font.size)
# [user] 默认全局字体颜色
font.colour=fore:$(colour.fore),back:$(colour.back)
# [user] 默认全局字体其它属性
font.others=$(other.italics),$(other.bold),$(other.eolfilled),$(other.underlined)

# 光标宽度，范围为 1 到 3
caret.width=1
# 行号栏的字母宽度
line.margin.width=2+
# 书签栏宽度，单位为像素，设为 0 将在书签行以前景色、背景色高亮
margin.width=8
# 折叠栏宽度
fold.margin.width=12
# 文本区左空白边宽度，单位为像素
blank.margin.left=1
# 文本区右空白边宽度，单位为像素
blank.margin.right=1
# Give symbolic names to the set of colours used in the standard styles.

# [user] 默认文本是否斜体
other.italics=notitalics
# [user] 默认文本是否粗体
other.bold=notbold
# [user] 默认是否 eolfilled
other.eolfilled=noteolfilled
# [user] 默认是否下划线
other.underlined=notunderlined

# [user] 默认全局字体颜色
font.colour=fore:$(colour.fore),back:$(colour.back)
# [user] 默认全局字体其它属性
font.others=$(other.italics),$(other.bold),$(other.eolfilled),$(other.underlined)

# 光标宽度，范围为 1 到 3
caret.width=1
# 行号栏的字母宽度
line.margin.width=2+
# 书签栏宽度，单位为像素，设为 0 将在书签行以前景色、背景色高亮
margin.width=8
# 折叠栏宽度
fold.margin.width=12
# 文本区左空白边宽度，单位为像素
blank.margin.left=1
# 文本区右空白边宽度，单位为像素
blank.margin.right=1
# Give symbolic names to the set of colours used in the standard styles.
------------------------------------------------------------------------------

[cpp lexer]
style.cpp.32=$(font.default),$(font.size),$(font.colour),$(font.others)
style.cpp.33=$(font.normal),$(font.size.small),$(font.colour),$(font.others)

# 空白
style.cpp.0=
# 多行注释: /* */
style.cpp.1=fore:#A4A4A4
# 单行注释: //
style.cpp.2=fore:#A4A4A4
# 文档注释: 以 /** or /*! 开始的块注释
style.cpp.3=fore:#A4A4A4
# 数字
style.cpp.4=fore:#00FFFF
# 关键字
style.cpp.5=fore:#0FB1FF
# 双引号字符串
style.cpp.6=fore:#FF00FF
# 单引号字符串
style.cpp.7=fore:#FF00FF
# UUIDs (only in IDL)
style.cpp.8=
# 预处理文本
style.cpp.9=fore:#FF6633
# 操作符
style.cpp.10=fore:#FFFFFF
# 标志符
style.cpp.11=fore:#BDC9F7
# 未关闭的字符串
style.cpp.12=fore:#FF00FF
# Verbatim strings for C#
style.cpp.13=
# JavaScript 的正则表达式
style.cpp.14=fore:#9AE12E
# 文档注释行: 以 /// or //! 开始的行注释.
style.cpp.15=fore:#404040
# 关键字 2
style.cpp.16=fore:#FFFF00
# 注释关键字（关键字 3）
style.cpp.17=fore:#F37F28
# 注释关键字错误
style.cpp.18=fore:#00FF00
# 全局类名（关键字 4）
style.cpp.19=fore:#FF2626

[php lexer]
# <?php
style.hypertext.18=fore:#FF0000
# 默认
style.hypertext.118=fore:#00FF00
# 普通字符
style.hypertext.121=fore:#FF9933
# 关键字   [if else switch]
style.hypertext.103=fore:#0FB1FF
# 关键字 2 [abstract final]
style.hypertext.89=fore:#FFFF00
# 关键字 3 [is_array reset]
style.hypertext.88=fore:#FF2626
# 关键字 4 [require exit]
style.hypertext.79=fore:#33FF66
# 双引号字符串
style.hypertext.119=fore:#FF00FF
# 单引号字符串
style.hypertext.120=fore:#FF00FF
# 变量
style.hypertext.123=fore:#BDC9F7
# 数字
style.hypertext.122=fore:#00FFFF
# 操作符
style.hypertext.127=fore:#FFFFFF
# 多行注释
style.hypertext.124=fore:#006000
# 单行注释
style.hypertext.125=fore:#6A6A00
# 双引号里的变量
style.hypertext.126=fore:#BDC9F7
# php 复杂变量
style.hypertext.104=fore:#BDC9F7


[html lexer]
# Text
style.hypertext.0=$(colour.char)
# Tags
style.hypertext.1=$(colour.keyword)
# Unknown Tags
style.hypertext.2=$(colour.char)
# Attributes
style.hypertext.3=fore:$(colour.char)
# Unknown Attributes
style.hypertext.4=$(colour.error)
# Numbers
style.hypertext.5=$(colour.number)
# Double quoted strings
style.hypertext.6=$(colour.string)
# Single quoted strings
style.hypertext.7=$(colour.string)
# Other inside tag
style.hypertext.8=fore:$(colour.char)
# Comment
style.hypertext.9=$(colour.text.comment),$(font.comment)
# Entities
style.hypertext.10=fore:$(colour.char)
# XML style tag ends '/>'
style.hypertext.11=fore:$(colour.char)
# XML identifier start '<?'
style.hypertext.12=fore:$(colour.char)
# XML identifier end '?>'
style.hypertext.13=fore:$(colour.char)
# SCRIPT
style.hypertext.14=fore:$(colour.char)
# ASP <% ... %>
style.hypertext.15=fore:$(colour.orange)
# ASP <% ... %>
style.hypertext.16=fore:$(colour.orange)
# CDATA
style.hypertext.17=$(colour.char)
# PHP
style.hypertext.18=$(colour.char)
# Unquoted values
style.hypertext.19=$(colour.char)
# JSP Comment <%-- ... --%>
style.hypertext.20=$(colour.char)
# SGML tags <! ... >
style.hypertext.21=$(colour.char)
# SGML command
style.hypertext.22=$(colour.char)
# SGML 1st param
style.hypertext.23=$(colour.char)
# SGML double string
style.hypertext.24=$(colour.char)
# SGML single string
style.hypertext.25=$(colour.char)
# SGML error
style.hypertext.26=$(colour.error)
# SGML special (#xxxx type)
style.hypertext.27=$(colour.char)
# SGML entity
style.hypertext.28=$(colour.char)
# SGML comment
style.hypertext.29=$(colour.char)
# SGML block
style.hypertext.31=$(colour.char)
# Some reasonable background colours found in the default Windows palette
# Off White #FFFBF0    Light green #C0DCC0    Light Blue #A6CAF0
# Matched Operators
style.hypertext.34=$(colour.char)
style.hypertext.35=$(colour.char)


# Embedded Javascript
fontcolour.js=
# JS Start - allows eol filled background to not start on same line as SCRIPT tag
style.hypertext.40=
# JS Default
style.hypertext.41=
# JS Comment
style.hypertext.42=
# JS Line Comment
style.hypertext.43=
# JS Doc comment
style.hypertext.44=
# JS Number
style.hypertext.45=
# JS Word
style.hypertext.46=
# JS Keyword
style.hypertext.47=
# JS Double quoted string
style.hypertext.48=$(colour.string)
# JS Single quoted string
style.hypertext.49=$(colour.string)
# JS Symbols
style.hypertext.50=
# JavaScript EOL
style.hypertext.51=
# JavaScript RegEx
style.hypertext.52=

# ASP Javascript
# JS Start - allows eol filled background to not start on same line as SCRIPT tag
style.hypertext.55=
# JS Default
style.hypertext.56=
# JS Comment
style.hypertext.57=
# JS Line Comment
style.hypertext.58=
# JS Doc comment
style.hypertext.59=
# JS Number
style.hypertext.60=
# JS Word
style.hypertext.61=
# JS Keyword
style.hypertext.62=
# JS Double quoted string
style.hypertext.63=$(colour.string)
# JS Single quoted string
style.hypertext.64=$(colour.string)
# JS Symbols
style.hypertext.65=
# JavaScript EOL
style.hypertext.66=
# JavaScript RegEx
style.hypertext.67=

# Embedded VBS
# Start
style.hypertext.70=
# Default
style.hypertext.71=
# Comment
style.hypertext.72=
# Number
style.hypertext.73=
# KeyWord
style.hypertext.74=
# String
style.hypertext.75=$(colour.string)
# Identifier
style.hypertext.76=
# Unterminated string
style.hypertext.77=$(colour.error)

# ASP VBS
# Start
style.hypertext.80=
# Default
style.hypertext.81=
# Comment
style.hypertext.82=
# Number
style.hypertext.83=
# KeyWord
style.hypertext.84=
# String
style.hypertext.85=$(colour.string)
# Identifier
style.hypertext.86=
# Unterminated string
style.hypertext.87=$(colour.error)

# Embedded Python
style.hypertext.90=
style.hypertext.91=
# Comment
style.hypertext.92=
# Number
style.hypertext.93=
# String
style.hypertext.94=$(colour.string)
# Single quoted string
style.hypertext.95=$(colour.string)
# Keyword
style.hypertext.96=$(colour.keyword)
# Triple quotes
style.hypertext.97=
# Triple double quotes
style.hypertext.98=
# Class name definition
style.hypertext.99=
# Function or method name definition
style.hypertext.100=
# Operators
style.hypertext.101=
# Identifiers
style.hypertext.102=

# PHP complex variable
style.hypertext.104=

# ASP Python
style.hypertext.105=
style.hypertext.106=
# Comment
style.hypertext.107=
# Number
style.hypertext.108=$(colour.number)
# String
style.hypertext.109=$(colour.string)
# Single quoted string
style.hypertext.110=
# Keyword
style.hypertext.111=$(colour.keyword)
# Triple quotes
style.hypertext.112=$(colour.string)
# Triple double quotes
style.hypertext.113=$(colour.string)
# Class name definition
style.hypertext.114=
# Function or method name definition
style.hypertext.115=
# Operators
style.hypertext.116=
# Identifiers
style.hypertext.117=

# PHP
# Default
style.hypertext.118=
# Double quoted String
style.hypertext.119=$(colour.string)
# Single quoted string
style.hypertext.120=$(colour.string)
# Keyword
style.hypertext.121=$(colour.keyword)
# Number
style.hypertext.122=$(colour.number)
# Variable
style.hypertext.123=
# Comment
style.hypertext.124=
# One line comment
style.hypertext.125=
# PHP variable in double quoted string
style.hypertext.126=
# PHP operator
style.hypertext.127=

[conf lexer]
# whitespace (SCE_CONF_DEFAULT)
style.conf.0=fore:#808080
# Comment (SCE_CONF_COMMENT)
style.conf.1=fore:#999999
# Number (SCE_CONF_NUMBER)
style.conf.2=fore:#00FFFF
# identifier (SCE_CONF_IDENTIFIER)
style.conf.9=fore:#F37F28
# extensions (like .gz, .tgz, .html) (SCE_CONF_EXTENSION)
style.conf.4=fore:#FF0000
# parameters for Apache Runtime directives (SCE_CONF_PARAMETER)
style.conf.5=fore:#BDC9F7
# Double quoted string (SCE_CONF_STRING)
style.conf.6=fore:#FF00FF
# Operators (SCE_CONF_OPERATOR)
style.conf.7=fore:#FFFFFF
# IP address (SCE_CONF_IP)
style.conf.8=fore:#33FF66
# Apache Runtime Directive (SCE_CONF_DIRECTIVE)
style.conf.3=fore:#BDC9F7


[css lexer]
# CSS
style.css.32=
# White space: Visible only in View Whitespace mode (or if it has a back colour)
style.css.0=
# Selector (HTML tag)
style.css.1=$(colour.keyword)
# Class selector ([HtmlTag].classSelector)
style.css.2=
# Pseudo class (HtmlTag:pseudoClass) see "keywords2" above
style.css.3=
# Unknown Pseudo class
style.css.4=$(colour.error)
# Operator
style.css.5=$(colour.operator)
# CSS1 Property, see keywords
style.css.6=fore:$(colour.yellow)
# Unknown Property
style.css.7=$(colour.error)
# Value
style.css.8=$(colour.string)
# Comment
style.css.9=$(colour.text.comment),$(font.comment)
# ID selector (#IdSel)
style.css.10=$(colour.operator)
# "!important"
style.css.11=$(colour.error)
# At-rule (@) except @media
style.css.12=$(colour.error)
# Double quoted strings
style.css.13=$(colour.string)
# Single quoted strings
style.css.14=$(colour.string)
# CSS2 Property, see keywords3
style.css.15=fore:$(colour.yellow)
# Attribute selection ([att='val'])
style.css.16=
# CSS3 Property, see keywords4
style.css.17=fore:$(colour.yellow)
# Pseudo elements, see keywords5
style.css.18=$(colour.keyword)
# Other CSS Property, see keywords6
style.css.19=fore:$(colour.yellow)
# Other Pseudoclass, see keywords7
style.css.20=$(colour.keyword)
# Other Pseudoelement, see keywords8
style.css.21=$(colour.keyword)
# "@media"
style.css.22=$(colour.error)

[lua lexer]
# 空白: 只在 View Whitespace 模式可见 (或者设置了 back 颜色)
style.lua.0=fore:#FF0000
# 块注释 (Lua 5.0)
style.lua.1=fore:#707070
# 行注释
style.lua.2=fore:#A4A4A4
# 文档注释 -- Not used in Lua (yet?)
style.lua.3=fore:#707070
# 数字
style.lua.4=fore:#00FFFF
# 关键字
style.lua.5=fore:#0FB1FF
# (双引号) 字符串
style.lua.6=fore:#FF00FF
# 字符 (单引号字符串)
style.lua.7=fore:#FF00FF
# 字符串直接量
style.lua.8=fore:#FF0000
# 预处理 (obsolete in Lua 4.0 and up)
style.lua.9=
# 操作符
style.lua.10=fore:#FFFFFF
# 标志符 (everything else...)
style.lua.11=fore:#BDC9F7
# End of line where string is not closed
style.lua.12=fore:#FF00FF
# 关键字 2
style.lua.13=fore:#9AE12E
# 关键字 3
style.lua.14=fore:#FF0000
# 关键字 4
style.lua.15=fore:#33FF66
# 关键字 5
#style.lua.16=$(style.lua.5)
# 关键字 6
#style.lua.17=$(style.lua.5)
# 关键字 7
#style.lua.18=$(style.lua.5)
# 关键字 8
#style.lua.19=$(style.lua.5)

[ahk lexer]
# 空白: 只在 View Whitespace 模式可见 (或者设置了 back 颜色)
style.asm.0=fore:#FF0000
# 块注释 (Lua 5.0)
style.asm.1=fore:#707070
# 行注释
style.asm.2=fore:#A4A4A4
# 文档注释 -- Not used in Lua (yet?)
style.asm.3=fore:#707070
# 数字
style.asm.4=fore:#00FFFF
# 关键字
style.asm.5=fore:#0FB1FF
# (双引号) 字符串
style.asm.6=fore:#FF00FF
# 字符 (单引号字符串)
style.asm.7=fore:#FF00FF
# 字符串直接量
style.asm.8=fore:#FF0000
# 预处理 (obsolete in Lua 4.0 and up)
style.asm.9=
# 操作符
style.asm.10=fore:#FFFFFF
# 标志符 (everything else...)
style.asm.11=fore:#BDC9F7
# End of line where string is not closed
style.asm.12=fore:#FF00FF
# 关键字 2
style.asm.13=fore:#9AE12E
# 关键字 3
style.asm.14=fore:#FF0000
# 关键字 4
style.asm.15=fore:#33FF66
# 关键字 5
#style.asm.16=$(style.lua.5)
# 关键字 6
#style.asm.17=$(style.lua.5)
# 关键字 7
#style.asm.18=$(style.lua.5)
# 关键字 8
#style.asm.19=$(style.lua.5)

[makefile lexer]
# Default
style.makefile.0=fore:#000000
# Comment: #
style.makefile.1=fore:#008000
# Pre-processor or other comment: !
style.makefile.2=fore:#0000FF
# Variable: $(x)
style.makefile.3=fore:#000080
# Operator
style.makefile.4=fore:#FF0000
# Target
style.makefile.5=fore:#700000
# Error
style.makefile.9=fore:#FFFF00

[props lexer]
# 默认 (值)
style.props.0=fore:#FF00FF
# 注释
style.props.1=fore:#3366FF
# 段 [section]
style.props.2=fore:#FF2626
# 赋值操作符 (=)
style.props.3=fore:#FFFFFF
# 默认值 (@)
style.props.4=fore:#3366FF
# 键
style.props.5=fore:#FECE79

[python lexer]

# Python styles
# White space
style.python.0=
# Comment
style.python.1=$(colour.text.comment)
# Number
style.python.2=$(colour.number)
# String
style.python.3=$(colour.string)
# Single quoted string
style.python.4=$(colour.string)
# Keyword
style.python.5=fore:$(colour.green)
# Triple quotes
style.python.6=$(colour.string)
# Triple double quotes
style.python.7=$(colour.string)
# Class name definition
style.python.8=$(colour.keyword)
# Function or method name definition
style.python.9=$(colour.keyword)
# Operators
style.python.10=bold
# Identifiers
style.python.11=
# Comment-blocks
style.python.12=$(colour.text.comment)
# End of line where string is not closed
style.python.13=$(colour.error)
# Highlighted identifiers
style.python.14=
# Decorators
style.python.15=fore:$(colour.base00)
# Matched Operators
style.python.34=
style.python.35=
# Braces are only matched in operator style
braces.python.style=10


[sql lexer]
# White space
style.sql.0=fore:#808080
# Comment
style.sql.1=fore:#007F00
# Line Comment
style.sql.2=fore:#007F00
# Doc comment
style.sql.3=fore:#7F7F7F
# Number
style.sql.4=fore:#00FFFF
# Keyword
style.sql.5=fore:#0FB1FF
# Double quoted string
style.sql.6=fore:#FF00FF
# Single quoted string
style.sql.7=fore:#FF00FF
# SQL*Plus
style.sql.8=
# SQL*Plus PROMPT
style.sql.9=fore:#007F00
# Operators
style.sql.10=fore:#FFFFFF
# Identifiers
style.sql.11=fore:#BDC9F7
# End of line where string is not closed / not used
style.sql.12=fore:#000000
# SQL*Plus Comment
style.sql.13=fore:#007F00
# not used
#style.sql.14=
# Hash Line Comment
style.sql.15=fore:#007F00
# Keywords2: Database objects
style.sql.16=fore:#B00040
# Comment Doc Keyword
style.sql.17=fore:#3060A0
# Comment Doc Keyword Error
style.sql.18=fore:#804020
# Keywords5: User Keywords 1
style.sql.19=fore:#F37F28
# Keywords6: User Keywords 2
style.sql.20=fore:#B00040
# Keywords7: User Keywords 3
style.sql.21=fore:#8B0000
# Keywords8: User Keywords 4
style.sql.22=fore:#800080
# SCE_SQL_QUOTEDIDENTIFIER
#style.sql.23=

[Error list styles]
style.errorlist.32=fore:#B06000,$(font.small)
# Default
style.errorlist.0=fore:#00FF00
# python Error
style.errorlist.1=fore:#FF0000
# gcc Error
style.errorlist.2=fore:#FFFF00
# Microsoft Error
style.errorlist.3=fore:#FFFF00
# command or return status
style.errorlist.4=fore:#FFFFFF
# Borland error and warning messages
style.errorlist.5=fore:#B06000
# perl error and warning messages
style.errorlist.6=fore:#FF0000
# .NET tracebacks
style.errorlist.7=fore:#FF0000
# Lua error and warning messages
style.errorlist.8=fore:#FF0000
# ctags
style.errorlist.9=fore:#FF00FF
# diff changed !
style.errorlist.10=fore:#007F00
# diff addition +
style.errorlist.11=fore:#00007F
# diff deletion -
style.errorlist.12=fore:#007F7F
# diff message ---
style.errorlist.13=fore:#7F0000
# PHP error
style.errorlist.14=fore:#FF0000
# Essential Lahey Fortran 90 error
style.errorlist.15=fore:#FF0000
# Intel Fortran Compiler error
style.errorlist.16=fore:#FF0000
# Intel Fortran Compiler v8.0 error/warning
style.errorlist.17=fore:#FF0000
# Absoft Pro Fortran 90/95 v8.2 error or warning
style.errorlist.18=fore:#FF0000
# HTML Tidy
style.errorlist.19=fore:#FF0000
# Java runtime stack trace
style.errorlist.20=fore:#FF0000
# Text matched with find in files and message part of GCC errors
style.errorlist.21=fore:#FF0000
# Ensures that spacing is not affected by line number styles
style.errorlist.33=$(font.small)

[Difference styles]
# Default
style.diff.0=fore:#000000
# Comment (part before "diff ..." or "--- ..." and , Only in ..., Binary file...)
style.diff.1=fore:#007F00
# Command (diff ...)
style.diff.2=fore:#7F7F00
# Source file (--- ...) and Destination file (+++ ...)
style.diff.3=fore:#7F0000
# Position setting (@@ ...)
style.diff.4=fore:#7F007F
# Line removal (-...)
style.diff.5=fore:#007F7F
# Line addition (+...)
style.diff.6=fore:#00007F
# Line change (!...)
style.diff.7=fore:#7F7F7F

[Batch]
style.batch.0=fore:#808080
# Comment (rem or ::)
style.batch.1=fore:#007F00,$(font.comment)
# Keywords
style.batch.2=fore:#0FB1FF,bold
# Label (line beginning with ':')
style.batch.3=$(colour.string),back:#606060,fore:#FFFF00,eolfilled
# Hide command character ('@')
style.batch.4=$(colour.preproc)
# External commands
style.batch.5=fore:#00FFFF,$(font.monospace),bold
# Variable: %%x (x is almost whatever, except space and %), %n (n in [0-9]), %EnvironmentVar%
style.batch.6=fore:##FF00FF
# Operator: * ? < > |
style.batch.7=fore:#FF00FF

[Makefile styles]
# Default
style.makefile.0=fore:#FF00FF
# Comment: #
# Pre-processor or other comment: !
style.makefile.2=$(colour.preproc)
# Variable: $(x)
style.makefile.3=fore:#ffff80
# Operator
style.makefile.4=$(colour.other.operator)
# Target
style.makefile.5=fore:#A00000
# Error
style.makefile.9=$(colour.error),eolfilled
# Matched Operators
style.makefile.34=fore:#0000FF,notbold
style.makefile.35=fore:#FF0000,notbold

[YAML lexer]
# default
style.yaml.0=$(font.text),fore:#FFFFFF
# comment line
style.yaml.1=$(font.comment),fore:#FF0000
# value identifier
style.yaml.2=$(font.base),fore:#FF00FF,bold
# keyword value
style.yaml.3=$(font.base),fore:#0FB1FF
# numerical value
style.yaml.4=$(font.base),fore:#00FFFF
# reference/repeating value
style.yaml.5=$(font.base),fore:#FF00FF
# document delimiting line
style.yaml.6=$(font.comment),fore:#FFFFFF,bold,back:#000088,eolfilled
# text block marker
style.yaml.7=$(font.text),fore:#707070
# syntax error marker
style.yaml.8=$(font.text),fore:#FFFFFF,italics,bold,back:#FF0000,eolfilled

[ruby lexer]

# Ruby
# White space
style.ruby.0=
# Error
style.ruby.1=$(colour.error)
# Comment line
style.ruby.2=$(colour.text.comment),$(font.comment),italics
# POD
style.ruby.3=
# Number
style.ruby.4=$(colour.number)
# Word
style.ruby.5=$(colour.char),bold
# String
style.ruby.6=$(colour.string)
# Character
style.ruby.7=$(colour.string)
# Class name
style.ruby.8=fore:$(colour.yellow)
# Def name
style.ruby.9=$(colour.keyword)
# Operator
style.ruby.10=
# Identifier
style.ruby.11=
# Regex
style.ruby.12=fore:$(colour.red)
# Global
style.ruby.13=$(colour.keyword)
# Symbol
style.ruby.14=$(colour.string)
# MODULE_NAME
style.ruby.15=fore:$(colour.orange),bold
# INSTANCE_VAR
style.ruby.16=$(colour.keyword)
# CLASS_VAR
style.ruby.17=$(colour.keyword)
# BACKTICKS
style.ruby.18=fore:$(colour.red)
# DATASECTION
style.ruby.19=
# HERE_DELIM
style.ruby.20=
# HERE_Q
style.ruby.21=
# HERE_QQ
style.ruby.22=
# HERE_QX
style.ruby.23=
# STRING_Q
style.ruby.24=
# STRING_QQ
style.ruby.25=
# STRING_QX
style.ruby.26=
# STRING_QR
style.ruby.27=
# STRING_QW
style.ruby.28=
# Demoted Keyword
style.ruby.29=$(style.ruby.5),normal
# STDIN
style.ruby.30=
# STDOUT
style.ruby.31=
# STDERR
style.ruby.40=

# Matched Operators
style.ruby.34=fore:$(colour.red),bold,back:$(colour.char)
style.ruby.35=fore:$(colour.red),bold,back:$(colour.char)

[cmake lexer]
# Whitespace (SCE_CMAKE_DEFAULT)
style.cmake.0=fore:#FF0000
# Comment (SCE_CMAKE_COMMENT)
style.cmake.1=fore:#707070,$(font.comment)
# String double quote (SCE_CMAKE_STRINGDQ)
style.cmake.2=fore:#A4A4A4,back:#EEEEEE
# String left quote (SCE_CMAKE_STRINGLQ)
style.cmake.3=fore:#707070,back:#EEEEE
# String right quote (SCE_CMAKE_STRINGRQ)
style.cmake.4=fore:#00FFFF,back:#EEEEEE
# Function (SCE_CMAKE_COMMANDS)
style.cmake.5=fore:#0FB1FF,bold
# Variable (SCE_CMAKE_ARGUMENTS)
style.cmake.6=fore:#FF00FF
# Label (SCE_CMAKE_VARIABLE)
style.cmake.7=fore:#FF00FF
# User Defined (SCE_CMAKE_USERDEFINED)
style.cmake.8=fore:#FF0000
# Section (SCE_CMAKE_WHILEDEF)
style.cmake.9=fore:#FFFFFF,bold
# Sub section (SCE_CMAKE_FOREACHDEF)
style.cmake.10=fore:#FFFFFF,bold
# If def (SCE_CMAKE_IFDEFINEDEF)
style.cmake.11=fore:#BDC9F7,bold
# Macro def (SCE_CMAKE_MACRODEF)
style.cmake.12=fore:#FF00FF,bold
# Variable within string (SCE_CMAKE_STRINGVAR)
style.cmake.13=fore:#CC3300,back:#EEEEEE
# Numbers (SCE_CMAKE_NUMBER)
style.cmake.14=fore:#FF0000

[ahk lexer]
# White space
style.ahk.0=fore:#FF0000
# Comment line
style.ahk.1=fore:#707070,italics
# Comment block
style.ahk.2=fore:#A4A4A4,italics
# Number
style.ahk.3=fore:#707070,bold,italics
# Function
style.ahk.4=fore:#00FFFF,bold,italics
# Keyword
style.ahk.5=fore:#0FB1FF,bold
# Macro
style.ahk.6=fore:#FF00FF,bold
# String
style.ahk.7=fore:#FF00FFbold
# Operator
style.ahk.8=fore:#FF0000,bold
# Variable
style.ahk.9=fore:#FFFFFF,bold
# Sent keys in string
style.ahk.10=fore:#BDC9F7,bold
# Pre-Processor
style.ahk.11=fore:#FF00FF,italics
# Special
style.ahk.12=fore:#9AE12E,italics
# Expand abbreviations
style.ahk.13=fore:#FF0000,bold
# ComObjects
style.ahk.14=fore:#FF0000,bold,italics
# UDF
style.ahk.15=fore:#33FF66


[nsis lexer]
# Whitespace (SCE_NSIS_DEFAULT)
style.nsis.0=fore:#FF0000,$(font.base)
# Comment (SCE_NSIS_COMMENT)
style.nsis.1=fore:#70707F,$(font.comment)
# String double quote (SCE_NSIS_STRINGDQ)
style.nsis.2=$(colour.string)
# String left quote (SCE_NSIS_STRINGLQ)
style.nsis.3=$(colour.string)
# String right quote (SCE_NSIS_STRINGRQ)
style.nsis.4=$(colour.string)
# Function (SCE_NSIS_FUNCTION)
style.nsis.5=$(colour.function)
#style.nsis.5=fore:#0033CC,bold
# Variable (SCE_NSIS_VARIABLE)
style.nsis.6=fore:#FF00FF
# Label (SCE_NSIS_LABEL)
style.nsis.7=fore:#FF00FF
# User Defined (SCE_NSIS_USERDEFINED)
style.nsis.8=fore:#FF0000
# Section (SCE_NSIS_SECTIONDEF)
style.nsis.9=fore:#FF007F,bold
# Sub section (SCE_NSIS_SUBSECTIONDEF)
style.nsis.10=fore:#FF007F,bold
# If def (SCE_NSIS_IFDEFINEDEF)
style.nsis.11=fore:#FF007F,bold
# Macro def (SCE_NSIS_MACRODEF)
style.nsis.12=fore:#FF007F,bold
# Variable within string (SCE_NSIS_STRINGVAR)
style.nsis.13=fore:#CCCCCC
# Numbers (SCE_NSIS_NUMBER)
style.nsis.14=fore:#FFFFFF
# Section Group SCE_NSIS_SECTIONGROUP)
style.nsis.15=fore:#FFFFFF,bold
# Page Ex SCE_NSIS_PAGEEX)
style.nsis.16=fore:#FF007F,bold
# Function Definition SCE_NSIS_FUNCTIONDEF)
style.nsis.17=fore:#FF007F,bold
# Comment Box SCE_NSIS_COMMENTBOX)
style.nsis.18=fore:#FF007F,$(font.comment),bold

[xml lexer]
# XML: eXtensible Markup Language
# For XML, there is no list of known tags or attributes so all are coloured known
# Default
style.xml.0=
# Tags
style.xml.1=$(colour.function)
# Unknown Tags
style.xml.2=$(colour.function)
# Attributes
style.xml.3=$(colour.keyword)
# Unknown Attributes
style.xml.4=$(colour.keyword)
# Numbers
style.xml.5=$(colour.number)
# Double quoted strings
style.xml.6=$(colour.string)
# Single quoted strings
style.xml.7=$(colour.string)
# Other inside tag
style.xml.8=
# Comment
style.xml.9=
# Entities
style.xml.10=
# XML style tag ends '/>'
style.xml.11=
# XML identifier start '<?'
style.xml.12=
# XML identifier end '?>'
style.xml.13=
# CDATA
style.xml.17=
# Question
style.xml.18=
# Unquoted Value
style.xml.19=
# SGML tags <! ... >
style.xml.21=
# SGML command
style.xml.22=
# SGML 1st param
style.xml.23=
# SGML double string
style.xml.24=
# SGML single string
style.xml.25=
# SGML error
style.xml.26=
# SGML special (#xxxx type)
style.xml.27=
# SGML entity
style.xml.28=
# SGML comment
style.xml.29=
# SGML block
style.xml.31=
# No brace matching in XML
braces.xml.style=31

[json lexer]
# Default
style.json.0=fore:FFFFFF
# Number
style.json.1=$(colour.number)
# String
style.json.2=$(colour.string)
# Unclosed string
style.json.3=$(colour.string),back:#FF0000,eolfilled
# Property name
style.json.4=$(colour.keyword)
# Escape sequence
style.json.5=fore:#0B982E
# Line comment
style.json.6=$(colour.code.comment.line),italics
# Block comment
style.json.7=$(colour.code.comment.box)
# Operator
style.json.8=$(colour.function)
# URL/IRI
style.json.9=fore:#0000FF
# JSON-LD compact IRI
style.json.10=fore:#D137C1
# JSON keyword
style.json.11=fore:#0BCEA7,bold
# JSON-LD keyword
style.json.12=fore:#EC2806
# Parsing error
style.json.13=fore:#FFFFFF,back:#FF0000

[bash lexer]
# Bash styles
# The bash styles are set to lots of different foreground and background colours as an
# aid to debugging SciTE's Bash lexer - not because this is a good way to display Bash.
style.bash.32=
# White space
style.bash.0=fore:#808080,$(font.base)
# Error
style.bash.1=$(colour.error)
# Comment
style.bash.2=$(colour.code.comment.box),$(font.code.comment.box)
# Number
style.bash.3=$(colour.number)
# Keyword
style.bash.4=$(colour.keyword),bold
# Double quoted string
style.bash.5=$(colour.string),$(font.monospace)
# Single quoted string
style.bash.6=$(colour.char),$(font.monospace)
# Operators
style.bash.7=$(colour.keyword),bold
# Identifiers (functions, etc.)
style.bash.8=$(colour.function)
# Scalars: $var
style.bash.9=$(colour.keyword),back:#DDD0DD
# Parameter expansion: ${var}
style.bash.10=$(colour.function),back:#FF0000
# Back Ticks
style.bash.11=$(colour.function),back:#A08080
# Here-doc (delimiter)
style.bash.12=$(colour.function),back:#DDD0DD
# Here-doc (single quoted, q)
style.bash.13=fore:#7F007F,back:#DDD0DD,eolfilled,notbold
# Braces are only matched in operator style
braces.bash.style=7
