abs(int x):int  #Returns the absolute value of x
div(int numer, int denom):div_t  #Divides numer (numerator) by denom (denominator)
labs(long int x):long int  #Returns the absolute value of x
ldiv(long int numer, long int denom):ldiv_t  #Divides numer (numerator) by denom (denominator)
rand(void):int  #Returns a pseudo-random number in the range of 0 to RAND_MAX
srand(unsigned int seed):void  #This function seeds the random number generator used by the function rand
acos(double x):double  #Returns the arc cosine of x in radians
asin(double x):double  #Returns the arc sine of x in radians
atan(double x):double  #Returns the arc tangent of x in radians
atan2(doubly y, double x):double  #Returns the arc tangent in radians of y/x based on signs of both values
cos(double x):double  #Returns the cosine of a radian angle x
cosh(double x):double  #Returns the hyperbolic cosine of x
sin(double x):double  #Returns the sine of a radian angle x
sinh(double x):double  #Returns the hyperbolic sine of x
tan(double x):double  #Returns the tangent of a radian angle x
tanh(double x):double  #Returns the hyperbolic tangent of x
exp(double x):double  #Returns the value of e raised to the xth power
frexp(double x, int *exponent):double  #The floating-point number x is broken up into a mantissa and exponent
ldexp(double x, int exponent):double  #Returns x multiplied by 2 raised to the power of exponent
log(double x):double  #Returns the natural logarithm (base-e logarithm) of x
log10(double x):double  #Returns the common logarithm (base-10 logarithm) of x
modf(double x, double *integer):double  #Breaks the floating-point number x into integer and fraction components
pow(double x, double y):double  #Returns x raised to the power of y
sqrt(double x):double  #Returns the square root of x
ceil(double x):double  #Returns the smallest integer value greater than or equal to x
fabs(double x):double  #Returns the absolute value of x
floor(double x):double  #Returns the largest integer value less than or equal to x
fmod(double x, double y):double  #Returns the remainder of x divided by y
calloc(size_t nitems, size_t size):void *  #Allocates the requested memory and returns a pointer to it
free(void *ptr):void  #Deallocates the memory previously allocated by a call to calloc, malloc, or realloc
malloc(size_t size):void *  #Allocates the requested memory and returns a pointer to it
realloc(void *ptr, size_t size):void *  #Attempts to resize the memory block pointed to by ptr that was previously allocated
memchr(const void *str, int c, size_t n):void *  #Searches for the first occurrence of the character c (an unsigned char) in the first n bytes of the string pointed to by the argument str
memcmp(const void *str1, const void *str2, size_t n):int  #Compares the first n bytes of str1 and str2
memcpy(void *str1, const void *str2, size_t n):void *  #Copies n characters from str2 to str1
memmove(void *str1, const void *str2, size_t n):void *  #Copies n characters from str2 to str1
memset(void *str, int c, size_t n):void *  #Copies the character c (an unsigned char) to the first n characters of the string pointed to by the argument str
atof(const char *str):double  #The string pointed to by the argument str is converted to a floating-point number (type double)
atoi(const char *str):int  #The string pointed to by the argument str is converted to an integer (type int)
atol(const char *str):long int  #The string pointed to by the argument str is converted to a long integer (type long int)
strtod(const char *str, char **endptr):double  #The string pointed to by the argument str is converted to a floating-point number (type double)
strtol(const char *str, char **endptr, int base):long int  #The string pointed to by the argument str is converted to a long integer (type long int)
strtoul(const char *str, char **endptr, int base):unsigned long int  #The string pointed to by the argument str is converted to an unsigned long integer (type unsigned long int)
strcat(char *str1, const char *str2):char *  #Appends the string pointed to by str2 to the end of the string pointed to by str1
strncat(char *str1, const char *str2, size_t n):char *  #Appends the string pointed to by str2 to the end of the string pointed to by str1 up to n characters long
strchr(const char *str, int c):char *  #Searches for the first occurrence of the character c (an unsigned char) in the string pointed to by the argument str
strcmp(const char *str1, const char *str2):int  #Compares the string pointed to by str1 to the string pointed to by str2
strncmp(const char *str1, const char *str2, size_t n):int  #Compares at most the first n bytes of str1 and str2
strcoll(const char *str1, const char *str2):int  #Compares string str1 to str2
strcpy(char *str1, const char *str2):char *  #Copies the string pointed to by str2 to str1
strncpy(char *str1, const char *str2, size_t n):char *  #Copies up to n characters from the string pointed to by str2 to str1
strcspn(const char *str1, const char *str2):size_t  #Finds the first sequence of characters in the string str1 that does not contain any character specified in str2
strerror(int errnum):char *  #Searches an internal array for the error number errnum and returns a pointer to an error message string
strlen(const char *str):size_t  #Computes the length of the string str up to but not including the terminating null character
strpbrk(const char *str1, const char *str2):char *  #Finds the first character in the string str1 that matches any character specified in str2
strrchr(const char *str, int c):char *  #Searches for the last occurrence of the character c (an unsigned char) in the string pointed to by the argument str
strspn(const char *str1, const char *str2):size_t  #Finds the first sequence of characters in the string str1 that contains any character specified in str2
strstr(const char *str1, const char *str2):char *  #Finds the first occurrence of the entire string str2 (not including the terminating null character) which appears in the string str1
strtok(char *str1, const char *str2):char *  #Breaks string str1 into a series of tokens
strxfrm(char *str1, const char *str2, size_t n):size_t  #Transforms the string str2 and places the result into str1
isalnum(int character):int  #A letter (A to Z or a to z) or a digit (0 to 9)
isalpha(int character):int  #A letter (A to Z or a to z)
iscntrl(int character):int  #Any control character (0x00 to 0x1F or 0x7F)
isdigit(int character):int  #A digit (0 to 9)
isgraph(int character):int  #Any printing character except for the space character (0x21 to 0x7E)
islower(int character):int  #A lowercase letter (a to z)
isprint(int character):int  #Any printing character (0x20 to 0x7E)
ispunct(int character):int  #Any punctuation character (any printing character except for space character or isalnum)
isspace(int character):int  #A whitespace character (space, tab, carriage return, new line, vertical tab, or formfeed)
isupper(int character):int  #An uppercase letter (A to Z)
isxdigit(int character):int  #A hexadecimal digit (0 to 9, A to F, or a to f)
tolower(int character):int  #If the character is an uppercase character (A to Z), then it is converted to lowercase (a to z)
toupper(int character):int  #If the character is a lowercase character (a to z), then it is converted to uppercase (A to Z)
mblen(const char *str, size_t n):int  #Returns the length of a multibyte character pointed to by the argument str
mbstowcs(schar_t *pwcs, const char *str, size_t n):size_t  #Converts the string of multibyte characters pointed to by the argument str to the array pointed to by pwcs
mbtowc(whcar_t *pwc, const char *str, size_t n):int  #Examines the multibyte character pointed to by the argument str
wcstombs(char *str, const wchar_t *pwcs, size_t n):size_t  #Converts the codes stored in the array pwcs to multibyte characters and stores them in the string str
wctomb(char *str, wchar_t wchar):int  #Examines the code which corresponds to a multibyte character given by the argument wchar
printf(const char *format, ...):int  #Sends formatted output to stdout
sprintf(char *str, const char *format, ...):int  #Sends formatted output to a string
vprintf(const char *format, va_list arg):int  #Sends formatted output to stdout using an argument list
vsprintf(char *str, const char *format, va_list arg):int  #Sends formatted output to a string using an argument list
scanf(const char *format, ...):int  #Read formatted input
sscanf(const char *str, const char *format, ...):int  #Reads formatted input from a string
getchar(void):int  #Gets a character (an unsigned char) from stdin
gets(char *str):char *  #Reads a line from stdin and stores it into the string pointed to by str
putchar(int char):int  #Writes a character (an unsigned char) specified by the argument char to stdout
puts(const char *str):int  #Writes a string to stdout up to but not including the null character
perror(const char *str):void  #Prints a descriptive error message to stderr
clearerr(FILE *stream):void  #Clears the end-of-file and error indicators for the given stream
fclose(FILE *stream):int  #Closes the stream
feof(FILE *stream):int  #Tests the end-of-file indicator for the given stream
ferror(FILE *stream):int  #Tests the error indicator for the given stream
fflush(FILE *stream):int  #Flushes the output buffer of a stream
fgetpos(FILE *stream, fpos_t *pos):int  #Gets the current file position of the stream and writes it to pos
fopen(const char *filename, const char *mode):FILE *  #Opens the filename pointed to by filename
fread(void *ptr, size_t size, size_t nmemb, FILE *stream):size_t  #Reads data from the given stream into the array pointed to by ptr
freopen(const char *filename, const char *mode, FILE *stream):FILE *  #Associates a new filename with the given open stream
fseek(FILE *stream, long int offset, int whence):int  #Sets the file position of the stream to the given offset
fsetpos(FILE *stream, const fpos_t *pos):int  #Sets the file position of the given stream to the given position
ftell(FILE *stream):long int  #Returns the current file position of the given stream
fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream):size_t  #Writes data from the array pointed to by ptr to the given stream
remove(const char *filename):int  #Deletes the given filename so that it is no longer accessible (unlinks the file)
rename(const char *old_filename, const char *new_filename):int  #Causes the filename referred to by old_filename to be changed to new_filename
rewind(FILE *stream):void  #Sets the file position to the beginning of the file of the given stream
setbuf(FILE *stream, char *buffer):void  #Defines how a stream should be buffered
setvbuf(FILE *stream, char *buffer, int mode, size_t size):int  #Defines how a stream should be buffered
tmpfile(void):FILE *  #Creates a temporary file in binary update mode (wb+)
tmpnam(char *str):char *  #Generates and returns a valid temporary filename which does not exist
fgetc(FILE *stream):int  #Gets the next character (an unsigned char) from the specified stream and advances the position indicator for the stream
fgets(char *str, int n, FILE *stream):char *  #Reads a line from the specified stream and stores it into the string pointed to by str
fputc(int char, FILE *stream):int  #Writes a character (an unsigned char) specified by the argument char to the specified stream and advances the position indicator for the stream
fputs(const char *str, FILE *stream):int  #Writes a string to the specified stream up to but not including the null character
fprintf(FILE *stream, const char *format, ...):int  #See printf
fscanf(FILE *stream, const char *format, ...):int  #See scanf
vfprintf(FILE *stream, const char *format, va_list arg):int  #Sends formatted output to a stream using an argument list
getc(FILE *stream):int  #Gets the next character (an unsigned char) from the specified stream and advances the position indicator for the stream
putc(int char, FILE *stream):int  #Writes an unsigned char specified by the argument char to the specified stream and advances the position indicator for the stream
ungetc(int char, FILE *stream):int  #Pushes the character char (an unsigned char) onto the specified stream so that the this is the next character read
assert(int expression):void  #The assert macro allows diagnostic information to be written to the standard error file
setjmp(jmp_buf environment):int  #Saves the environment into the variable environment
longjmp(jmp_buf environment, int value):void  #Causes the environment to be restored from a setjmp call where the environment variable had been saved
(*signal(int sig, void (*func)(int)))(int):void  #Controls how a signal is handled
raise(int sig):int  #Causes signal sig to be generated
abort(void):void  #Causes an abnormal program termination
atexit(void (*func)(void)):int  #Causes the specified function to be called when the program terminates normally
exit(int status):void  #Causes the program to terminate normally
getenv(const char *name):char *  #Searches for the environment string pointed to by name and returns the associated value to the string
system(const char *string):int  #The command specified by string is passed to the host environment to be executed by the command processor
asctime(const struct tm *timeptr):char *  #Returns a pointer to a string which represents the day and time of the structure timeptr
clock(void):clock_t  #Returns the processor clock time used since the beginning of an implementation-defined era (normally the beginning of the program)
ctime(const time_t *timer):char *  #Returns a string representing the localtime based on the argument timer
difftime(time_t time1, time_t time2):double  #Calculates the difference of seconds between time1 and time2 (time1-time2)
gmtime(const time_t *timer):struct tm *  #The value of timer is broken up into the structure tm and expressed in (UTC)
localtime(const time_t *timer):struct tm *  #The value of timer is broken up into the structure tm and expressed in the local time zone
mktime(struct tm *timeptr):time_t  #Converts the structure pointed to by timeptr into a time_t value according to the local time zone
strftime(char *str, size_t maxsize, const char *format, const struct tm *timeptr):size_t  #Formats the time represented in the structure timeptr according to the formatting rules
time(time_t *timer):time_t  #Calculates the current calender time and encodes it into time_t format
bsearch(const void *key, const void *base, size_t nitems, size_t size, int(*compar)(const void *, const void *)):void *  #Performs a binary search
qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, constvoid*)):void  #Sorts an array
va_arg(va_list ap, type):type  #Expands to the next argument in the paramater list of the function with type type
va_end(va_list ap):void  #Allows a function with variable arguments which used the va_start macro to return
setlocale(int category, const char *locale):char *  #Sets or reads location dependent information
localeconv(void):struct lconv*  #Gets lconv representing the current location settings
